{"version":3,"sources":["components/TodoFilter/TodoFilter.types.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/Error/Error.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["ShowType","TodoList","React","memo","todosFromServer","onTodoSelect","selectedTodo","className","map","todo","id","title","completed","isSelectedTodo","classNames","type","onClick","TodoFilter","query","filterBy","onSelectChange","onInputChange","value","onChange","target","Object","entries","key","selected","placeholder","style","pointerEvents","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","get","url","a","fullURL","then","fetch","response","json","Error","TodoModal","handleCloseButton","useState","isLoading","setIsLoading","selectedUser","setSelectedUser","hasError","setHasError","loadUser","userId","user","useEffect","href","email","name","App","setTodosFromServer","All","setFilterBy","setQuery","setSelectedTodo","getTodosFromServer","todos","visibleTodos","useMemo","filterOptions","Boolean","Active","Completed","filteredTodos","filter","toLocaleLowerCase","includes","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d94dc613.chunk.js","sourcesContent":["import React from 'react';\n\nexport interface Props {\n  query: string,\n  filterBy: ShowType,\n  onSelectChange: React.Dispatch<React.SetStateAction<ShowType>>\n  onInputChange: React.Dispatch<React.SetStateAction<string>>\n}\n\nexport enum ShowType {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import React from 'react';\nimport classNames from 'classnames/bind';\nimport { Props } from './TodoList.types';\n\nexport const TodoList: React.FC<Props> = React.memo((\n  { todosFromServer, onTodoSelect, selectedTodo },\n) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todosFromServer.map(todo => {\n        const { id, title, completed } = todo;\n        const isSelectedTodo = selectedTodo && selectedTodo.id === todo.id;\n\n        return (\n          <tr data-cy=\"todo\" className=\"\" key={id}>\n            <td className=\"is-vcentered\">{id}</td>\n            <td className=\"is-vcentered\">\n              {completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p className={classNames({\n                'has-text-success': completed,\n                'has-text-danger': !completed,\n              })}\n              >\n                {title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-centered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => onTodoSelect(todo)}\n              >\n                <span className=\"icon\">\n                  <i\n                    className={classNames(\n                      'far',\n                      { 'fa-eye': !isSelectedTodo },\n                      { 'fa-eye-slash': isSelectedTodo },\n                    )}\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        );\n      })}\n    </tbody>\n  </table>\n));\n","import React from 'react';\nimport { Props, ShowType } from './TodoFilter.types';\n\nexport const TodoFilter: React.FC<Props> = ({\n  query,\n  filterBy,\n  onSelectChange,\n  onInputChange,\n}) => {\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={filterBy}\n            onChange={({ target: { value } }) => {\n              onSelectChange(value as ShowType);\n            }}\n          >\n            {Object.entries(ShowType).map(([key, value]) => (\n              <option\n                value={value}\n                selected={filterBy === key}\n              >\n                {key}\n              </option>\n            ))}\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={({ target: { value } }) => {\n            onInputChange(value);\n          }}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {query && (\n            <button\n              aria-label=\"Reset\"\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => onInputChange('')}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nasync function get<T>(url: string): Promise<T> {\n  const fullURL = `${BASE_URL + url}.json`;\n  const response = await wait(1000)\n    .then(() => fetch(fullURL));\n\n  return response.json();\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\n\nexport const Error: React.FC = () => (\n  <div>No answer from server</div>\n);\n","import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames/bind';\nimport { Loader } from '../Loader';\nimport { Props } from './TodoModal.types';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { Error } from '../Error/Error';\n\nexport const TodoModal: React.FC<Props> = ({\n  selectedTodo,\n  handleCloseButton,\n}) => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [hasError, setHasError] = useState(false);\n\n  const loadUser = async () => {\n    try {\n      const user = await getUser(selectedTodo.userId);\n\n      setSelectedUser(user);\n    } catch {\n      setHasError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadUser();\n  }, []);\n\n  const { title, id, completed } = selectedTodo;\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading && (\n        <Loader />\n      )}\n\n      {selectedUser && (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            <button\n              aria-label=\"close\"\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={handleCloseButton}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              <strong\n                className={classNames(\n                  { 'has-text-success': completed },\n                  { 'has-text-danger': !completed },\n                )}\n              >\n                {completed\n                  ? (\n                    'Done'\n                  )\n                  : (\n                    'Planned'\n                  )}\n              </strong>\n\n              {' by '}\n\n              <a href={`mailto:${selectedUser.email}`}>\n                {selectedUser.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n\n      {hasError && (\n        <>\n          <Error />\n\n          <button\n            type=\"button\"\n            className=\"button is-danger\"\n            onClick={handleCloseButton}\n          >\n            Close\n          </button>\n        </>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useMemo, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { ShowType } from './components/TodoFilter/TodoFilter.types';\nimport { TodoModal } from './components/TodoModal';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\nimport { Loader } from './components/Loader';\nimport { Error } from './components/Error/Error';\n\nexport const App: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [todosFromServer, setTodosFromServer] = useState<Todo[]>([]);\n  const [filterBy, setFilterBy] = useState<ShowType>(ShowType.All);\n  const [query, setQuery] = useState('');\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [hasError, setHasError] = useState<boolean>(false);\n\n  const getTodosFromServer = async () => {\n    setIsLoading(true);\n\n    try {\n      const todos = await getTodos();\n\n      setTodosFromServer(todos);\n    } catch {\n      setHasError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    getTodosFromServer();\n  }, []);\n\n  const visibleTodos = useMemo(() => {\n    const filterOptions = {\n      [ShowType.All]: (todo: Todo) => Boolean(todo),\n      [ShowType.Active]: (todo: Todo) => !todo.completed,\n      [ShowType.Completed]: (todo: Todo) => todo.completed,\n    };\n\n    let filteredTodos = todosFromServer.filter(filterOptions[filterBy]);\n\n    if (query) {\n      filteredTodos = filteredTodos.filter(\n        ({ title }) => title.toLocaleLowerCase().includes(query.toLocaleLowerCase()),\n      );\n    }\n\n    return filteredTodos;\n  }, [filterBy, query, isLoading]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                query={query}\n                filterBy={filterBy}\n                onSelectChange={setFilterBy}\n                onInputChange={setQuery}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading\n                ? <Loader />\n                : (\n                  <>\n                    {visibleTodos.length > 0 && !hasError\n                      ? (\n                        <TodoList\n                          todosFromServer={visibleTodos}\n                          onTodoSelect={setSelectedTodo}\n                          selectedTodo={selectedTodo}\n                        />\n                      )\n                      : (\n                        <p>\n                          No todos found\n                        </p>\n                      )}\n                  </>\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          selectedTodo={selectedTodo}\n          handleCloseButton={() => setSelectedTodo(null)}\n        />\n      )}\n\n      {hasError && <Error />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}